# docker-compose is only used for development
# run this in the terminal:
# docker-compose build # to build docker-compose services
# docker-compose build --no-cache
# docker-compose up # to start and run a collection of containers
# docker-compose down # to clean containers
# In browser: http://127.0.0.1:8000/

version: "3.9" # version of the docker-compose synttax

services:

  # TO BUILD: docker build -t app-dev -f Dockerfile .
  app: # name of the app service
    container_name: app-dev
    build: # build a docker file inside a current dir
      context: . # root dir that currently running from
      dockerfile: Dockerfile  # Use the Dockerfile for the backend
      args:
        - DEV=true # build argument DEV and save it to true
    ports:
      - "8000:8000" # how we access network when we connect to our server
    volumes: # the way of mapping dir from our system to a docker container
      - ./app:/app #automatically syncs the code to the container
      - dev-static-data:/vol/web  # set up a volume to volume dir created in docker image
                                  # reason: for persistent data when developing on local machine (maintained in same dir)
    command: > # the default command used to run the service
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

    environment: # tells app how to connect to db (same names as below)
      - DB_HOST=db # name of the service as below
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
      - DEBUG=1  # set debug mode for development on local machine
    depends_on: # tell docker-compose that app service depends on db (db starts 1st, then the app)
      - db

  db: # name of the database service
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data # dev-db-data is the name from the volume below
    # set the initial db config for our new db service
    # for local dev server (shouldn't be hardcoded for deployment for an actual server (so not for public))
    environment: # set environment variables below
      - POSTGRES_DB=devdb # name of db inside postgresql
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

  # TO BUILD: docker build -t frontend-dev -f frontend/Dockerfile.frontend .
  frontend:
    container_name: frontend-dev
    build:
      context: .  # Path to your React frontend code
      dockerfile: frontend/Dockerfile.frontend
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app  # Path to your React frontend code
      - './node_modules:/app/node_modules'  # Share node_modules directory
    command: ["npm", "start"]

volumes:
  dev-db-data: # name of the volume
  dev-static-data:
